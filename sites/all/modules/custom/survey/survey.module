<?php
/**
 * Created by PhpStorm.
 * User: jonaskortum
 * Date: 16.02.17
 * Time: 10:21
 */

require_once("survey_question_evaluation.inc");


function survey_menu()
{

    $items['start_survey'] = array(
        'title' => 'Umfrage starten',
        'page callback' => 'drupal_get_form',
        'access callback' => 'user_is_logged_in',
        'page arguments' => array('survey_start_form'),
    );

    $items['survey_question/%/%'] = array(
        'page callback' => 'drupal_get_form',
        'access callback' => TRUE,
        'page arguments' => array('survey_form'),
        'file' => 'survey_answer_question.inc'
    );

    $items['survey_question_evaluation/%/%'] = array(
        'page callback' => 'drupal_get_form',
        'access callback' => TRUE,
        'page arguments' => array('survey_question_evaluation_form'),
        'file' => 'survey_question_evaluation.inc'
    );

    $items['finish_survey/%'] = array(
        'title' => 'Ende der Umfrage',
        'access callback' => 'user_is_logged_in',
        'page callback' => 'survey_finish_survey',
    );

    $items['survey/tokens'] = array(
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer users'),
      'page arguments' => array('survey_token_form'),
    );

    $items['survey/%'] = array(
      'title' => 'Umfrage starten',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('survey_start_form'),
      'access callback' => TRUE,
      );

    return $items;
}

//Diese Funktion baut die Startseite der Umfrage
function survey_start_form()
{
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Start',
        '#submit' => array('survey_start_survey')
    );

    return $form;
}

/*
 * Diese Funktion führt den Nutzer zurück ins Hauptmenü
 */
function survey_finish_survey()
{
    return "Danke für Ihre Teilnahme, die Umfrage ist nun beendet!";
}

/*
 * Diese Funktion lädt alle verfügbaren Fragen der Umfrage aus der Datenbank und sortiert sie aufsteigend nach
 * Benutzer-Gewichtung und der ID
 */
function survey_get_all_questions()
{
    $questions = array();
    $question_result = db_query("SELECT * FROM {question} ORDER BY weight, question_id");

    foreach ($question_result as $question) {
        array_push($questions, $question);
    }

    return $questions;
}

/*
 * Diese Funktion ermittelt alle verfügbaren Antwortmöglichkeiten einer Frage und gibt sie sortiert nach der ID
 * aufsteigend zurück. Die ID der entsprechenden Frage wird als Parameter übergeben
 */
function survey_get_answers_from_question($question_id)
{
    $answers = array();
    $answer_result = db_query("SELECT * FROM {question_possible_answers} WHERE question_id = :question_id ORDER BY weight", array(
        'question_id' => $question_id
    ));
    foreach ($answer_result as $answer) {
        array_push($answers, $answer);
    }

    return $answers;
}


//Diese Funktion startet die Umfrage. Es wird ein einzigartiges Passwort für den Nutzer erstellt und in die DB
//geschrieben. Anschließend wird der Nutzer zur ersten Frage weitergeleitet.
function survey_start_survey()
{
    if(arg(0) === 'survey') {
      $user_check_string = arg(1);
    } else {
      $user_check_string = survey_create_token();
    }

    //Die erste Frage wird geladen
    $question_id = survey_get_questions(0);
    drupal_goto("survey_question/" . $question_id . "/" . $user_check_string);
}

//Diese Funktion generiert eine einzigartige ID für jeden Nutzer die 30 Stellen beinhaltet.
function survey_generate_random_string($length)
{
    $valid_characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $characters_length = strlen($valid_characters);
    $random_string = '';
    for ($i = 0; $i < $length; $i++) {
        $random_string .= $valid_characters[rand(0, $characters_length - 1)];
    }
    return $random_string;
}

/**
 * Generates and saves a unique user token.
 *
 * @return string
 *   The generated unique user token.
 */
function survey_create_token() {
  //Einzigartige ID für den Nutzer wird angelegt...
  do {
    $user_check_string = survey_generate_random_string(30);
    $success = true;

    //...und abgespeichert
    try {
      db_query("INSERT INTO {survey_users} (user_pw) VALUES (:user_pw)", array(
        ':user_pw' => $user_check_string
      ));
    } catch (PDOException $e) {
      // generated token already used, try again
      $success = false;
    }
  } while (!$success);

  return $user_check_string;
}


/**
 * @param $token
 *   Unique string user token.
 *
 * @return string
 *   Full link to the survey.
 */
function survey_get_survey_link($token) {
  global $base_url;
  $link = check_plain($base_url . '/survey/' . $token);

  return $link;
}


/**
 * Builds the form to manage survey participants / tokens.
 */
function survey_token_form($form, &$form_state) {
  if (empty($form_state['values']['token_quantity'])) {
    // form to create new tokens
    $form['token_quantity'] = array(
      '#type' => 'textfield',
      '#title' => "Zugangsschlüssel",
      '#title_display' => 'invisible',
      '#size' => 1,
      '#maxlength' => 3,
      '#element_validate' => array('element_validate_integer_positive'),
      '#field_suffix' => t('Zugansschlüssel für Umfrageteilnehmer erstellen.'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Zugangsschlüssel erstellen',
    );

  } else {
    // table with created tokens and full survey links.
    $noTokens = $form_state['values']['token_quantity'];
    $count = 1;

    $header = array(t('Zugangsschlüssel'), t('Umfrage-URL'));
    $rows = array();
    while ($count <= $noTokens) {
      $token = survey_create_token();
      $rows[] = array(
        $token,
        survey_get_survey_link($token)
      );
      $count++;
    }

    $form['tokens_table'] = array (
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#title' => t('Zugangsschlüssel'),
    );
  }

  return $form;
}

function survey_token_form_submit($form, &$form_state) {
  $form_state['rebuild'] = true;
}


//Diese Funktion holt sich die zuletzt abgegebenen Antworten eines Nutzers zu einer bestimmten Frage aus der DB und gibt
//diese als Array zurück.
function survey_get_answers($question_id, $user_passcode)
{
    $answers = array();

    //Antworten eines Nutzers zu einer Frage werden geladen
    $answer_result = db_query("SELECT * FROM {question_user_answers} WHERE user_pw = :user_pw AND question_id = :question_id
                              ORDER BY question_user_answers_id ASC", array(
        ':user_pw' => $user_passcode,
        ':question_id' => $question_id
    ));

    foreach ($answer_result as $answer) {
        // Nur die zuletzt abgegebene Antwort zurückgeben.
        $answers[$answer->answer_id] = $answer;
    }

    return $answers;

}

//Diese Funktion überprüft, ob die eingelesene Nutzer-ID aus der Taskleiste valide ist.
function survey_check_valid_user_pw($user_pw)
{

    $counter = 0;
    $result = db_query("SELECT * FROM {survey_users} WHERE user_pw = :user_pw", array(
        ':user_pw' => $user_pw
    ));

    foreach ($result as $item) {
        $counter++;
    }

    if ($counter == 1) {
        return true;
    } else {
        return false;
    }
}

//Diese Funktion sucht sich anhand der aktuellen Fragen-ID die nächste Frage aus der DB und gibt diese zurück. Sollte
//keine Frage mehr folgen, wird eine -1 zurückgegeben.
function survey_get_questions($current_question_id)
{

    $questions = array();
    $question_result = db_query("SELECT * FROM {question} ORDER BY weight, question_id");

    foreach ($question_result as $question) {
        array_push($questions, $question->question_id);
    }

    $question_index = array_search($current_question_id, $questions);

    if (sizeof($questions) > $question_index) {
        return $questions[$question_index];
    } else {
        return -1;
    }
}

/**
 * Überprüft, ob es sich bei der Benutzereingabe um eine nichtnegative Ganzzahl handelt.
 *
 * @param $element
 *   Das zu überprüfende Form-Element
 */
function survey_element_validate_nonnegative_integer($element) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be an non-negative integer.', array(
      '%name' => $element['#title'],
    )));
  }
}